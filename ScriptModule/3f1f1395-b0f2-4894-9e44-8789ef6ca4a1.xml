<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="executeTransientRESTOperation" result-type="Any" api-version="6.0.0" id="3f1f1395-b0f2-4894-9e44-8789ef6ca4a1" version="0.0.0" allowed-operations="evf" category-name="com.vmware.pso.rest">
  <description><![CDATA[Executes a transient RESTOperation for a transient RESTHost.
Performs the operation without having the operation nor the host persist in the RESTHost Inventory.
Returns the raw response content as string, status code, and response headers.]]></description>
  <param n="baseUrl" t="string"><![CDATA[Base URL for connecting to the RESTful application]]></param>
  <param n="username" t="string"><![CDATA[Optional username for Basic authentication to the REST host]]></param>
  <param n="password" t="SecureString"><![CDATA[Optional password for Basic authentication to the REST host]]></param>
  <param n="opMethod" t="string"><![CDATA[Method of the REST operation]]></param>
  <param n="opUrl" t="string"><![CDATA[URL template of the REST operation including variablized in-line arguments; e.g., /items/{arg1}]]></param>
  <param n="urlParamValues" t="Array/string"><![CDATA[In-line parameter values, if any]]></param>
  <param n="headers" t="Array/CompositeType(key:string,value:string):KeyValueString"><![CDATA[Optional headers of the request]]></param>
  <param n="contentType" t="string"><![CDATA[Optional content type of the request body (null for GET and DELETE operations)]]></param>
  <param n="content" t="string"><![CDATA[Raw content of the request body (null for GET and DELETE operations)]]></param>
  <script encoded="false"><![CDATA[// Create transient host and Op
var host = createHost(baseUrl, username, password);
var op = createOp(host, opMethod, opUrl);

// Execute request
var request = setRequest(op, setUrlParamValues(urlParamValues), headers, contentType, content);
var response = request.execute();

//Process response
var contentAsString = parseResponse(response);
var statusCode = response.statusCode;
var headers = response.getAllHeaders();

return {
  "contentAsString" : contentAsString,
  "statusCode" : statusCode + "",
  "headers" : headers
};

// Create a transient RESTHost
// If given user/password, uses Basic auth in Shared Session mode
function createHost(url, user, pw) {
	System.log("Creating transient REST host with base URL: " + url);
	
	var host = new RESTHost(url);
	host.name = generateNameFromUrl(url);
	host.url = url;
	host.hostVerification = false;
	host.proxyHost = null;
	host.proxyPort = 0;
	host.authentication = createSharedBasicAuth(user, pw);
	
	host = RESTHostManager.createTransientHostFrom(host);
	
	RESTHostManager.reloadConfiguration();
	
	return host;
}

// Generate a friendly name for a RESTHost or RESTOperation from a given URL,
// removing "HTTP" and "HTTPS", and replacing non-words with '_'
function generateNameFromUrl(url) {
	var name = url;
	name = name.replace(/https:\/\//i, '');
	name = name.replace(/http:\/\//i, '');
	name = name.replace(/\W/g, '_');
	return name;
}

// Instantiate REST Basic authentication in Shared Session mode
function createSharedBasicAuth(user, pw) {
	if (!isSet(user) || !isSet(pw)) {
		return null;
	}
	
	var authParams = ["Shared Session", user, pw];
	var authObject = RESTAuthenticationManager.createAuthentication("Basic", authParams);
	
	System.log("REST host authentication: " + authObject);
	
	return authObject;
}

// Is a given string non-null and not empty?
function isSet(s) {
	return s != null && s != "";
}

// Create a transient RESTOperation
// For POST and PUT, the default content type is application/json
function createOp(host, method, url) {
	var name = generateNameFromUrl(url);
	
	var op = new RESTOperation(name);
	op.method = method;
	op.urlTemplate = url;
	op.host = host;
	
	if (method.toUpperCase() === "POST" || method.toUpperCase() === "PUT") {
		op.defaultContentType = "application/json";
	}
	
	System.debug("Creating operation '" + name + " with URL '" + url + "'");
	System.debug("New operation: " + op);
	
	op = RESTHostManager.createTransientOperationFrom(op);
	
	return op;
}

// If no in-line parameter values are given, return empty array by default
function setUrlParamValues(urlParamValues) {
	return (!urlParamValues) ? [] : urlParamValues;
}

// Prepare the RESTRequest object for executing the RESTOperation
function setRequest(op, urlParamValues, headers, contentType, content) {
	var request = op.createRequest(urlParamValues, content);
	request.contentType = contentType;
	
	for each (var header in headers) {
		request.setHeader(header.key, header.value);
	}
	
	System.debug("Request to execute: " + request);
	System.log("Request URL: " + request.fullUrl);
	
	return request;
}

// Parse the RESTResponse object returned from executing a RESTOperation
function parseResponse(response) {
    const HTTP_ClientError = 404;
	var statusCode = response.statusCode;
	System.log("Status code: " + statusCode);
	
	var headers = response.getAllHeaders();
	for each (var headerKey in headers.keys) {
		System.debug(headerKey + ": " + headers.get(headerKey));
	}
	
	var contentAsString = response.contentAsString;
	//System.debug("Response content as string: " + contentAsString);
	
	if (statusCode > HTTP_ClientError) {
	    throw "HTTPError: status code: " + statusCode;
	} else {
	    return contentAsString;
	}
}]]></script>
</dunes-script-module>